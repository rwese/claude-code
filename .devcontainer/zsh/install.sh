#!/bin/bash
# Claude DevContainer ZSH Configuration Installer
# Installs ZSH configuration for Claude DevContainer and browser launcher system

set -euo pipefail
IFS=$'\n\t'

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ZSH_CONFIG_DIR="$HOME/.config/zsh/claude-devcontainer"
BACKUP_DIR="$HOME/.config/zsh/claude-devcontainer-backup-$(date +%Y%m%d-%H%M%S)"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

log_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

log_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Check prerequisites
check_prerequisites() {
    log_info "Checking prerequisites..."
    
    # Check if ZSH is available
    if ! command -v zsh >/dev/null 2>&1; then
        log_error "ZSH is not installed. Please install ZSH first."
        exit 1
    fi
    
    # Check if ZSH is the current shell
    if [[ "$SHELL" != *"zsh"* ]]; then
        log_warning "ZSH is not your default shell. Current shell: $SHELL"
        log_info "Consider running: chsh -s $(which zsh)"
    fi
    
    # Check if ~/.zshrc exists
    if [[ ! -f "$HOME/.zshrc" ]]; then
        log_warning "~/.zshrc not found. Creating basic configuration..."
        touch "$HOME/.zshrc"
    fi
    
    log_success "Prerequisites check complete"
}

# Backup existing configuration
backup_existing() {
    if [[ -d "$ZSH_CONFIG_DIR" ]]; then
        log_info "Backing up existing configuration to $BACKUP_DIR"
        mkdir -p "$(dirname "$BACKUP_DIR")"
        cp -r "$ZSH_CONFIG_DIR" "$BACKUP_DIR"
        log_success "Backup created: $BACKUP_DIR"
    fi
}

# Install ZSH configuration files
install_config_files() {
    log_info "Installing ZSH configuration files..."
    
    # Create configuration directory
    mkdir -p "$ZSH_CONFIG_DIR"
    
    # Copy configuration files
    local files=(
        "claude-yolo-aliases.zsh"
        "claude-yolo-functions.zsh"
        "claude-yolo-completions.zsh"
        "README.md"
    )
    
    for file in "${files[@]}"; do
        if [[ -f "$SCRIPT_DIR/$file" ]]; then
            cp "$SCRIPT_DIR/$file" "$ZSH_CONFIG_DIR/"
            log_success "Installed: $file"
        else
            log_error "Source file not found: $file"
            exit 1
        fi
    done
    
    log_success "Configuration files installed to $ZSH_CONFIG_DIR"
}

# Update ~/.zshrc
update_zshrc() {
    log_info "Updating ~/.zshrc..."
    
    local zshrc_content="
# Claude DevContainer Configuration
# Auto-generated by claude-devcontainer installer
if [[ -d \"$ZSH_CONFIG_DIR\" ]]; then
    for file in \"$ZSH_CONFIG_DIR\"/*.zsh; do
        [[ -r \"\$file\" ]] && source \"\$file\"
    done
fi"
    
    # Check if already configured
    if grep -q "Claude DevContainer Configuration" "$HOME/.zshrc" 2>/dev/null; then
        log_warning "Claude DevContainer configuration already exists in ~/.zshrc"
        log_info "Updating existing configuration..."
        
        # Remove old configuration and add new
        local temp_file=$(mktemp)
        grep -v "Claude DevContainer Configuration" "$HOME/.zshrc" > "$temp_file" || true
        grep -v "claude-devcontainer" "$temp_file" > "$HOME/.zshrc" || true
        rm "$temp_file"
    fi
    
    # Add configuration
    echo "$zshrc_content" >> "$HOME/.zshrc"
    log_success "Updated ~/.zshrc with Claude DevContainer configuration"
}

# Verify installation
verify_installation() {
    log_info "Verifying installation..."
    
    # Check if files exist
    local files=(
        "claude-yolo-aliases.zsh"
        "claude-yolo-functions.zsh"
        "claude-yolo-completions.zsh"
    )
    
    local missing_files=()
    for file in "${files[@]}"; do
        if [[ ! -f "$ZSH_CONFIG_DIR/$file" ]]; then
            missing_files+=("$file")
        fi
    done
    
    if [[ ${#missing_files[@]} -gt 0 ]]; then
        log_error "Missing files: ${missing_files[*]}"
        exit 1
    fi
    
    # Check if ~/.zshrc includes our configuration
    if ! grep -q "claude-devcontainer" "$HOME/.zshrc"; then
        log_error "Configuration not found in ~/.zshrc"
        exit 1
    fi
    
    log_success "Installation verification complete"
}

# Test configuration
test_configuration() {
    log_info "Testing configuration..."
    
    # Source the configuration in a subshell to test
    if zsh -c "
        for file in \"$ZSH_CONFIG_DIR\"/*.zsh; do
            [[ -r \"\$file\" ]] && source \"\$file\"
        done
        # Test if basic functions are available
        command -v cy-help >/dev/null && echo 'Functions loaded successfully'
    " >/dev/null 2>&1; then
        log_success "Configuration test passed"
    else
        log_error "Configuration test failed"
        log_info "Try running: source ~/.zshrc"
        exit 1
    fi
}

# Show installation summary
show_summary() {
    echo
    log_success "🎉 Claude DevContainer ZSH configuration installed successfully!"
    echo
    echo "📁 Configuration location: $ZSH_CONFIG_DIR"
    echo "📝 Configuration files:"
    echo "   • claude-yolo-aliases.zsh    - Core aliases and basic functions"
    echo "   • claude-yolo-functions.zsh  - Advanced workflow functions"
    echo "   • claude-yolo-completions.zsh - Tab completions"
    echo
    echo "🚀 Getting started:"
    echo "   1. Restart your terminal or run: source ~/.zshrc"
    echo "   2. Type 'cy-help' for available commands"
    echo "   3. Use TAB completion for intelligent suggestions"
    echo
    echo "💡 Quick commands:"
    echo "   • cyb              - Rebuild devcontainer"
    echo "   • cyc <command>    - Execute in container"
    echo "   • cy-dev          - Smart development startup"
    echo "   • cy-health       - System health check"
    echo "   • cy-status       - Show status"
    echo
    echo "📚 Documentation: $ZSH_CONFIG_DIR/README.md"
    echo
    log_info "Enjoy your enhanced Claude DevContainer experience! 🚀"
}

# Uninstall function
uninstall() {
    log_info "Uninstalling Claude DevContainer ZSH configuration..."
    
    # Remove configuration directory
    if [[ -d "$ZSH_CONFIG_DIR" ]]; then
        rm -rf "$ZSH_CONFIG_DIR"
        log_success "Removed configuration directory"
    fi
    
    # Remove from ~/.zshrc
    if [[ -f "$HOME/.zshrc" ]]; then
        local temp_file=$(mktemp)
        grep -v "Claude DevContainer Configuration" "$HOME/.zshrc" > "$temp_file" || true
        grep -v "claude-devcontainer" "$temp_file" > "$HOME/.zshrc" || true
        rm "$temp_file"
        log_success "Removed configuration from ~/.zshrc"
    fi
    
    log_success "Uninstallation complete"
    log_info "Restart your terminal to complete the removal"
}

# Usage information
usage() {
    cat << 'EOF'
Claude DevContainer ZSH Configuration Installer

USAGE:
    ./install.sh [COMMAND]

COMMANDS:
    install     Install configuration (default)
    uninstall   Remove configuration
    test        Test existing configuration
    help        Show this help

EXAMPLES:
    ./install.sh                    # Install configuration
    ./install.sh test               # Test configuration
    ./install.sh uninstall          # Remove configuration

The installer will:
    • Install ZSH configuration files to ~/.config/zsh/claude-devcontainer/
    • Update ~/.zshrc to source the configuration
    • Create backups of existing configuration
    • Verify installation integrity

EOF
}

# Main execution
main() {
    local command="${1:-install}"
    
    case "$command" in
        install)
            echo "🔧 Installing Claude DevContainer ZSH Configuration"
            echo "=================================================="
            check_prerequisites
            backup_existing
            install_config_files
            update_zshrc
            verify_installation
            test_configuration
            show_summary
            ;;
        
        uninstall)
            echo "🗑️  Uninstalling Claude DevContainer ZSH Configuration"
            echo "======================================================"
            uninstall
            ;;
        
        test)
            echo "🧪 Testing Claude DevContainer ZSH Configuration"
            echo "=============================================="
            test_configuration
            log_success "Configuration is working correctly"
            ;;
        
        help|--help|-h)
            usage
            ;;
        
        *)
            log_error "Unknown command: $command"
            usage
            exit 1
            ;;
    esac
}

# Execute main function
main "$@"